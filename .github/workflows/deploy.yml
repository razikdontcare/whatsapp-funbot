name: Deploy on Release

on:
  push:
    tags:
      - "v*" # This will trigger the workflow on any tag that starts with 'v'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=tag

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          VERSION: ${{ steps.get_version.outputs.VERSION }}
          CR_PAT: ${{ secrets.CR_PAT }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          NODE_ENV: "production"
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || '22' }}
          envs: GITHUB_REPOSITORY,VERSION,CR_PAT,MONGO_URI,NODE_ENV,GROQ_API_KEY
          script: |
            # Login to GitHub Container Registry
            echo "${CR_PAT}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Define image
            IMAGE_NAME="ghcr.io/${GITHUB_REPOSITORY}:${VERSION}"
            echo "Using image: ${IMAGE_NAME}"

            # Pull the latest image
            docker pull "${IMAGE_NAME}"

            # Stop and remove the existing container if it exists
            docker stop whatsapp-funbot 2>/dev/null || true
            docker rm whatsapp-funbot 2>/dev/null || true

            # Create .env file (alternative method)
            echo "Creating environment configuration..."
            cat > .env << EOF
            MONGO_URI=${MONGO_URI}
            NODE_ENV=${NODE_ENV}
            GROQ_API_KEY=${GROQ_API_KEY}
            EOF

            # Run the new container with appropriate environment variables
            docker run -d --name whatsapp-funbot \
              --hostname razikdotnet-wabot \
              --restart unless-stopped \
              --env-file .env \
              "${IMAGE_NAME}"

            # Clean up old images
            docker image prune -af
